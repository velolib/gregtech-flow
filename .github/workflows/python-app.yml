# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

permissions:
  contents: read

defaults:
  run:
    shell: bash

# TODO: Test on ubuntu and macos
jobs:
  build:
    runs-on: windows-latest

    steps:
      # -------------------------------
      # Check out repo and setup Python
      # -------------------------------
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      # -------------------------------
      # Install Poetry
      # -------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      # -------------------------------
      # Load cached venv if exists
      # -------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      # -------------------------------
      # Install dependencies
      # -------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      # -------------------------------
      # Install project
      # -------------------------------
      - name: Install project
        run: poetry install --no-interaction
      # -------------------------------
      # Run tests
      # -------------------------------
      - name: Run pytest
        run: |
          source $VENV
          pytest -svv
      - name: Run mypy
        run: |
          source $VENV
          mypy src
